package com.pizzariauds;

import com.pizzariauds.model.Extra;
import com.pizzariauds.repository.ExtraRepository;
import com.pizzariauds.model.Pizza;
import com.pizzariauds.repository.PizzaRepository;
import com.pizzariauds.model.Sabor;
import com.pizzariauds.repository.SaborRepository;
import com.pizzariauds.repository.TamanhoRepository;
import com.pizzariauds.model.Tamanho;
import com.pizzariauds.validacoes.PizzaValidacoes;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController    // This means that this class is a Controller
@RequestMapping(path = "/uds") // This means URL's start with /demo (after Application path)
public class MainController {

    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired // This means to get the bean called userRepository
    private TamanhoRepository tamanhoRepository;
    @Autowired // This means to get the bean called userRepository
    private ExtraRepository extraRepository;
    @Autowired // This means to get the bean called userRepository
    private SaborRepository saborRepository;
    @Autowired // This means to get the bean called userRepository
    private PizzaRepository pizzaRepository;

    @GetMapping(path = "/allTamanhos")
    public @ResponseBody
    Iterable<Tamanho> getAllTamanhos() {
        // This returns a JSON or XML with the users
        return tamanhoRepository.findAll();
    }

    @PostMapping("/gravarTamanhos")
    Iterable<Tamanho> gravarTamanhos(@RequestBody Iterable<Tamanho> tamanhos) {
        return tamanhoRepository.saveAll(tamanhos);
    }

    @GetMapping(path = "/allSabores")
    public @ResponseBody
    Iterable<Sabor> getAllSabores() {
        // This returns a JSON or XML with the users
        return saborRepository.findAll();
    }

    @PostMapping("/gravarSabores")
    Iterable<Sabor> gravarSabores(@RequestBody Iterable<Sabor> sabores) {
        return saborRepository.saveAll(sabores);
    }

    @GetMapping(path = "/allExtras")
    public @ResponseBody
    Iterable<Extra> getAllExtras() {
        // This returns a JSON or XML with the users
        return extraRepository.findAll();
    }

    @PostMapping("/gravarExtras")
    Iterable<Extra> gravarExtras(@RequestBody Iterable<Extra> extras) {
        return extraRepository.saveAll(extras);
    }

    @GetMapping(path = "/allPizzas")
    public @ResponseBody
    Iterable<Pizza> getAllPizza() {
        // This returns a JSON or XML with the users
        return pizzaRepository.findAll();
    }

    @GetMapping("/calcularPizza")
    Pizza calculaPizza(@RequestBody Pizza pizza) {
        return calcularPizza(pizza);
    }

    @PostMapping("/gravarPizza")
    Pizza gravarPizza(@RequestBody Pizza pizza) {
        Pizza p = new Pizza();
        pizza = calculaPizza(pizza);
        if (PizzaValidacoes.valida(pizza)) {
            pizza.setId_pizza(null);
//            pizza.setIdExtras(null);
            p = pizzaRepository.save(pizza);
        }
        return p;
    }
//Calcula Tempo e Valor da Pizza pelos IDS de tamanho, tempo e extras

    public Pizza calcularPizza(Pizza pizza) {
        Iterable<Sabor> sabores = saborRepository.findAll();
        Iterable<Extra> extras = extraRepository.findAll();
        Iterable<Tamanho> tamanhos = tamanhoRepository.findAll();

        pizza.setValorTotal(0);
        pizza.setTempoTotal(0);

        for (Iterator iterator = sabores.iterator(); iterator.hasNext();) {
            Sabor sabor = (Sabor) iterator.next();
            if (sabor.getId_sabor() == pizza.getSabor().getId_sabor()) {
                pizza.addTempo(sabor.getTempo());
                pizza.setSabor(sabor);
            }
        }
        for (Iterator iterator = tamanhos.iterator(); iterator.hasNext();) {
            Tamanho tamanho = (Tamanho) iterator.next();
            if (tamanho.getId_tamanho() == pizza.getTamanho().getId_tamanho()) {
                pizza.addTempo(tamanho.getTempo());
                pizza.addValor(tamanho.getValor());
                pizza.setTamanho(tamanho);
            }
        }
        Set<Extra> novosExtras = new HashSet<>();
        for (Iterator iterator = extras.iterator(); iterator.hasNext();) {
            Extra extraLista = (Extra) iterator.next();
            for (Iterator<Extra> iteratorPizza = pizza.getExtras().iterator(); iteratorPizza.hasNext();) {
                Extra extraPizza = iteratorPizza.next();
                if (extraPizza.getId_extra() == extraLista.getId_extra() && !novosExtras.contains(extraLista)) {
                    pizza.addTempo(extraLista.getTempo());
                    pizza.addValor(extraLista.getValor());
                    novosExtras.add(extraLista);

                }
            }
        }
        pizza.setExtras(novosExtras);
        return pizza;
    }
}
